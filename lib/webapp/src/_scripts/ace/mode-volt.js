/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from dist/syntax-volt/volt.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

ace.define("ace/mode/volt_highlight_rules",["require","exports","module","ace/lib/oop","ace/mode/text_highlight_rules"], function(require, exports, module) {
"use strict";

var oop = ace.require("../lib/oop");
var TextHighlightRules = ace.require("./text_highlight_rules").TextHighlightRules;

var VoltHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#comment"
        }, {
            include: "#constants"
        }, {
            include: "#prefixes"
        }, {
            include: "#injector"
        }, {
            include: "#function"
        }, {
            include: "#relation"
        }],
        "#comment": [{
            token: "comment.block.volt",
            regex: /\/\*/,
            push: [{
                token: "comment.block.volt",
                regex: /\*\//,
                next: "pop"
            }, {
                defaultToken: "comment.block.volt"
            }]
        }, {
            token: "comment.line.volt",
            regex: /#/,
            push: [{
                token: "comment.line.volt",
                regex: /$|$/,
                next: "pop"
            }, {
                defaultToken: "comment.line.volt"
            }]
        }],
        "#string": [{
            token: "string.quoted.single.volt",
            regex: /'/,
            push: [{
                token: "string.quoted.single.volt",
                regex: /'/,
                next: "pop"
            }, {
                token: "invalid.string.newline",
                regex: /$/
            }, {
                token: "constant.character.escape.volt",
                regex: /\\./
            }, {
                defaultToken: "string.quoted.single.volt"
            }]
        }, {
            token: "string.quoted.double.volt",
            regex: /"/,
            push: [{
                token: "string.quoted.double.volt",
                regex: /"/,
                next: "pop"
            }, {
                token: "invalid.string.newline",
                regex: /$/
            }, {
                token: "constant.character.escape.volt",
                regex: /\\./
            }, {
                defaultToken: "string.quoted.double.volt"
            }]
        }],
        "#interpolated-string": [{
            token: "text",
            regex: /`/,
            push: [{
                token: "text",
                regex: /`/,
                next: "pop"
            }, {
                token: "markup.raw.volt",
                regex: /\$\{/,
                push: [{
                    token: "markup.raw.volt",
                    regex: /\}/,
                    next: "pop"
                }, {
                    include: "#expression"
                }]
            }, {
                token: "string.interpolated.volt",
                regex: /./
            }]
        }],
        "#constant": [{
            token: "constant.language.volt",
            regex: /\$\w+/
        }],
        "#variable": [{
            token: [
                "variable.parameter.volt",
                "string.unquoted.volt"
            ],
            regex: /(\?\w+)((?::\w+)?)/
        }],
        "#regex": [{
            token: "string.regexp.volt",
            regex: /~[\/](?:[^\/\\]|\\.)+[\/][a-z]*/
        }],
        "#argument-list": [{
            token: "text",
            regex: /\(/,
            push: [{
                token: "text",
                regex: /\)/,
                next: "pop"
            }, {
                token: "storage.modifier.volt",
                regex: /single/
            }, {
                token: "variable.parameter.volt",
                regex: /\?\w+/
            }]
        }],
        "#datatype": [{
            token: "storage.type.volt",
            regex: /\^\^\w*:\w*/
        }],
        "#rdf-type": [{
            token: [
                "keyword.control.volt",
                "text",
                "string.unquoted.volt"
            ],
            regex: /(a)(\s+)(\w*:\w*)/
        }],
        "#expression": [{
            include: "#variable"
        }, {
            include: "#regex"
        }, {
            include: "#string"
        }, {
            include: "#interpolated-string"
        }, {
            token: "constant.language.volt",
            regex: /subject|predicate|object/
        }, {
            token: "keyword.operator.volt",
            regex: /match(?:es)?/
        }, {
            token: "storage.type.volt",
            regex: /null/
        }, {
            token: [
                "constant.character.eval.volt",
                "text",
                "entity.name.function.volt"
            ],
            regex: /\b(no|yes)(\s+)(\?\w+)/
        }, {
            token: "entity.name.function.volt",
            regex: /\w*:\w*(?=\()/
        }, {
            token: "string.unquoted.predicate.volt",
            regex: /\w*:\w*/
        }, {
            token: "constant.character.eval-math-operator.volt",
            regex: /[<>!=]=/
        }, {
            token: "constant.character.eval-math-operator.volt",
            regex: /[-+*\/><]|&&|\|\|/
        }, {
            token: "constant.numeric.volt",
            regex: /[+-]?(?:\d+(?:\.\d*)?|\.\d+)/
        }, {
            token: "constant.language.volt",
            regex: /true|false|tau|pi/
        }, {
            token: "constant.language.volt",
            regex: /[$]\w+/
        }, {
            token: "support.function.volt",
            regex: /sqrt|abs|uri|iri|concat|str(?:after|before|len|dt|lang|uuid|starts|ends)?/
        }, {
            token: "punctuation.separator.sequence.volt",
            regex: /,/
        }, {
            token: "text",
            regex: /\(/,
            push: [{
                token: "text",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#expression"
            }]
        }, {
            token: "invalid.illegal.volt",
            regex: /[^\s]+/
        }],
        "#prefix-definition": [{
            token: "constant.language.prefixed-name.volt",
            regex: /\w*:\w*/
        }, {
            token: "string.unquoted.uri.volt",
            regex: /</,
            push: [{
                token: "string.unquoted.uri.volt",
                regex: />\s*(?=;)/,
                next: "pop"
            }, {
                defaultToken: "string.unquoted.uri.volt"
            }]
        }],
        "#variable-filter": [{
            include: "#variable"
        }, {
            token: "text",
            regex: /\(/,
            push: [{
                token: "text",
                regex: /\)/,
                next: "pop"
            }, {
                token: "keyword.operator.volt",
                regex: /or/
            }, {
                include: "#datatype"
            }, {
                include: "#rdf-type"
            }, {
                include: "#constant"
            }, {
                include: "#regex"
            }, {
                token: "entity.name.function.volt",
                regex: /\w*:\w*/
            }, {
                token: "storage.type.volt",
                regex: /iri|numeric|literal|string|blanknode/
            }]
        }, {
            token: "text",
            regex: /:\[/,
            push: [{
                token: "text",
                regex: /\]/,
                next: "pop"
            }, {
                token: "string.unquoted.volt",
                regex: /\w*/
            }, {
                token: "markup.raw.volt",
                regex: /,|\s+/
            }, {
                token: "invalid.illegal.volt",
                regex: /./
            }]
        }],
        "#gets-expression": [{
            token: "keyword.operator.assignment.volt",
            regex: /[%*\/+-]?=/,
            push: [{
                token: "text",
                regex: /;/,
                next: "pop"
            }, {
                include: "#expression"
            }]
        }],
        "#implicit-property-expression": [{
            token: "string.unquoted.predicate.volt",
            regex: /\w*:\w*/
        }, {
            token: "constant.character.volt",
            regex: /\s(?:u|U)\s/
        }, {
            token: "text",
            regex: /(?=\&\w+\()/,
            push: [{
                token: "text",
                regex: /\)/,
                next: "pop"
            }, {
                token: "entity.name.function.volt",
                regex: /&\w+/
            }, {
                token: "string.unquoted.predicate.volt",
                regex: /\w*:\w*/
            }]
        }],
        "#implicit-property-extraction": [{
            token: "text",
            regex: /=/,
            push: [{
                token: "text",
                regex: /(?=;)/,
                next: "pop"
            }, {
                include: "#implicit-property-expression"
            }]
        }],
        "#pattern": [{
            include: "#sparql-pattern"
        }, {
            include: "#contextual-pattern"
        }],
        "#sparql-pattern": [{
            token: "string.unquoted.sparql.volt",
            regex: /\{/,
            push: [{
                token: [
                    "string.unquoted.sparql.volt",
                    "string.unquoted.sparql.volt"
                ],
                regex: /(\})([^$]*)/,
                next: "pop"
            }, {
                include: "#graph-pattern"
            }, {
                defaultToken: "string.unquoted.sparql.volt"
            }]
        }],
        "#contextual-pattern": [{
            token: "string.unquoted.context-block.volt",
            regex: /\[/,
            push: [{
                token: "string.unquoted.context-block.volt",
                regex: /\]/,
                next: "pop"
            }, {
                include: "#graph-pattern"
            }, {
                defaultToken: "string.unquoted.context-block.volt"
            }]
        }],
        "#graph-pattern": [{
            token: "constant.language.volt",
            regex: /(?:this|subject|property)|\W[@$]\w+/
        }, {
            token: "text",
            regex: /\[/,
            push: [{
                token: "text",
                regex: /\]/,
                next: "pop"
            }, {
                include: "#graph-pattern"
            }]
        }, {
            token: "text",
            regex: /\{/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#graph-pattern"
            }]
        }, {
            include: "#variable"
        }, {
            token: "string.interpolated.volt",
            regex: /a/
        }, {
            token: "string.interpolated.volt",
            regex: /\w*:\w*/
        }, {
            token: "keyword.operator.volt",
            regex: /filter|not|exists|graph|select|where|limit|sum|group|order|by|group_concat|offset|if|coalesce|in|is(?:iri|blank|literal|numeric)|str|lang|datatype|iri|uri|str|bnode|strdt|strlang|uuid|struuid|strlen|regex|replace|substr|ucase|lcase|strstarts|strends|contains|strbefore|strafter|encode_for_uri|concat|langmatches|abs|round|ceil|floor|rand|now|year|month|day|hours|minutes|seconds|timezone|tz|md5|sha1|sha256|sha384|sha512|values|distinct|reduced|having|count|avg|min|max|sample/
        }],
        "#constants": [{
            token: [
                "support.constant.other.constants.volt",
                "text"
            ],
            regex: /\b(constants)(\s*\{)/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                token: "constant.numeric.volt",
                regex: /[$]\w+/
            }, {
                include: "#gets-expression"
            }]
        }],
        "#prefixes": [{
            token: ["support.constant.other.prefixes.volt", "text"],
            regex: /(prefixes)(\s*\{)/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#prefix-definition"
            }]
        }, {
            token: ["support.constant.other.prefix.volt", "text"],
            regex: /(prefix)(\s*)(?=\w*:)/,
            push: [{
                token: "text",
                regex: /$/,
                next: "pop"
            }, {
                include: "#prefix-definition"
            }]
        }],
        "#injector": [{
            token: [
                "storage.type.volt",
                "text",
                "entity.name.function.volt",
                "text"
            ],
            regex: /(injector)(\s+)(\&\w+)(\s*)(?=\([^\)]*\)\s*\{)/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#argument-list"
            }, {
                include: "#block-static-start"
            }]
        }],
        "#relation": [{
            token: [
                "storage.modifier.volt",
                "text",
                "storage.type.volt",
                "text",
                "entity.name.function.volt",
                "text",
                "support.constant.extends.volt",
                "text",
                "entity.name.class.super-class.volt",
                "text"
            ],
            regex: /(?:(abstract)(\s+))?(relation)(\s+)(\w*:\w*)(?:(\s+)(extends)(\s+)(\w*:\w*))?(\s*\{)/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#body"
            }]
        }],
        "#function": [{
            token: [
                "storage.type.volt",
                "text",
                "entity.name.function.volt",
                "text"
            ],
            regex: /(function)(\s+)(\w*:\w*)(\s*)(?=\([^\)]*\)\s*\{)/,
            push: [{
                token: "text",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#argument-list"
            }, {
                include: "#block-start"
            }]
        }],
        "#body": [{
            include: "#comment"
        }, {
            include: "#assignment"
        }, {
            include: "#if-else"
        }, {
            include: "#implicit-select"
        }, {
            include: "#return"
        }],
        "#body-static": [{
            include: "#comment"
        }, {
            token: "keyword.operator.volt",
            regex: /return/,
            push: [{
                token: "text",
                regex: /;/,
                next: "pop"
            }, {
                include: "#interpolated-string"
            }]
        }],
        "#block": [{
            token: "punctuation.other.volt",
            regex: /\{/,
            push: [{
                token: "punctuation.other.volt",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#body"
            }]
        }],
        "#block-start": [{
            token: "punctuation.other.volt",
            regex: /\{/,
            push: [{
                token: [],
                regex: /(?=\})/,
                next: "pop"
            }, {
                include: "#body"
            }]
        }],
        "#block-static-start": [{
            token: "punctuation.other.volt",
            regex: /\{/,
            push: [{
                token: [],
                regex: /(?=\})/,
                next: "pop"
            }, {
                include: "#body-static"
            }]
        }],
        "#if-else": [{
            token: "keyword.operator.volt",
            regex: /if|else(?:\s+if)?/,
            push: [{
                token: "text",
                regex: /(?=\{)/,
                next: "pop"
            }, {
                include: "#expression"
            }]
        }, {
            include: "#block"
        }],
        "#assignment": [{
            include: "#variable-filter"
        }, {
            include: "#gets-expression"
        }],
        "#return": [{
            token: "keyword.operator.volt",
            regex: /yield|output|return/,
            push: [{
                token: "text",
                regex: /;/,
                next: "pop"
            }, {
                include: "#expression"
            }]
        }],
        "#implicit-select": [{
            token: ["keyword.operator.volt", "text"],
            regex: /(subject|object)(\s)(?=\?)/,
            push: [{
                token: "text",
                regex: /(?=\{|\[|\;)/,
                next: "pop"
            }, {
                include: "#variable-filter"
            }, {
                include: "#implicit-property-extraction"
            }]
        }, {
            include: "#graph-pattern"
        }],
        "#select": [{
            token: "keyword.operator.volt",
            regex: /select\s+/
        }, {
            include: "#variable-filter"
        }, {
            include: "#sparql-pattern"
        }]
    }
    
    this.normalizeRules();
};

VoltHighlightRules.metaData = {
    name: "Volt",
    scopeName: "source.volt",
    fileTypes: ["volt"]
}


oop.inherits(VoltHighlightRules, TextHighlightRules);

exports.VoltHighlightRules = VoltHighlightRules;
});

ace.define("ace/mode/folding/cstyle",["require","exports","module","ace/lib/oop","ace/range","ace/mode/folding/fold_mode"], function(ace_require, exports, module) {
"use strict";

var oop = ace_require("../../lib/oop");
var Range = ace_require("../../range").Range;
var BaseFoldMode = ace_require("./fold_mode").FoldMode;

var FoldMode = exports.FoldMode = function(commentRegex) {
    if (commentRegex) {
        this.foldingStartMarker = new RegExp(
            this.foldingStartMarker.source.replace(/\|[^|]*?$/, "|" + commentRegex.start)
        );
        this.foldingStopMarker = new RegExp(
            this.foldingStopMarker.source.replace(/\|[^|]*?$/, "|" + commentRegex.end)
        );
    }
};
oop.inherits(FoldMode, BaseFoldMode);

(function() {
    
    this.foldingStartMarker = /(\{|\[)[^\}\]]*$|^\s*(\/\*)/;
    this.foldingStopMarker = /^[^\[\{]*(\}|\])|^[\s\*]*(\*\/)/;
    this.singleLineBlockCommentRe= /^\s*(\/\*).*\*\/\s*$/;
    this.tripleStarBlockCommentRe = /^\s*(\/\*\*\*).*\*\/\s*$/;
    this.startRegionRe = /^\s*(\/\*|\/\/)#?region\b/;
    this._getFoldWidgetBase = this.getFoldWidget;
    this.getFoldWidget = function(session, foldStyle, row) {
        var line = session.getLine(row);
    
        if (this.singleLineBlockCommentRe.test(line)) {
            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))
                return "";
        }
    
        var fw = this._getFoldWidgetBase(session, foldStyle, row);
    
        if (!fw && this.startRegionRe.test(line))
            return "start"; // lineCommentRegionStart
    
        return fw;
    };

    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {
        var line = session.getLine(row);
        
        if (this.startRegionRe.test(line))
            return this.getCommentRegionBlock(session, line, row);
        
        var match = line.match(this.foldingStartMarker);
        if (match) {
            var i = match.index;

            if (match[1])
                return this.openingBracketBlock(session, match[1], row, i);
                
            var range = session.getCommentFoldRange(row, i + match[0].length, 1);
            
            if (range && !range.isMultiLine()) {
                if (forceMultiline) {
                    range = this.getSectionRange(session, row);
                } else if (foldStyle != "all")
                    range = null;
            }
            
            return range;
        }

        if (foldStyle === "markbegin")
            return;

        var match = line.match(this.foldingStopMarker);
        if (match) {
            var i = match.index + match[0].length;

            if (match[1])
                return this.closingBracketBlock(session, match[1], row, i);

            return session.getCommentFoldRange(row, i, -1);
        }
    };
    
    this.getSectionRange = function(session, row) {
        var line = session.getLine(row);
        var startIndent = line.search(/\S/);
        var startRow = row;
        var startColumn = line.length;
        row = row + 1;
        var endRow = row;
        var maxRow = session.getLength();
        while (++row < maxRow) {
            line = session.getLine(row);
            var indent = line.search(/\S/);
            if (indent === -1)
                continue;
            if  (startIndent > indent)
                break;
            var subRange = this.getFoldWidgetRange(session, "all", row);
            
            if (subRange) {
                if (subRange.start.row <= startRow) {
                    break;
                } else if (subRange.isMultiLine()) {
                    row = subRange.end.row;
                } else if (startIndent == indent) {
                    break;
                }
            }
            endRow = row;
        }
        
        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);
    };
    this.getCommentRegionBlock = function(session, line, row) {
        var startColumn = line.search(/\s*$/);
        var maxRow = session.getLength();
        var startRow = row;
        
        var re = /^\s*(?:\/\*|\/\/|--)#?(end)?region\b/;
        var depth = 1;
        while (++row < maxRow) {
            line = session.getLine(row);
            var m = re.exec(line);
            if (!m) continue;
            if (m[1]) depth--;
            else depth++;

            if (!depth) break;
        }

        var endRow = row;
        if (endRow > startRow) {
            return new Range(startRow, startColumn, endRow, line.length);
        }
    };

}).call(FoldMode.prototype);

});

ace.define("ace/mode/volt",["require","exports","module","ace/lib/oop","ace/mode/text","ace/mode/volt_highlight_rules","ace/mode/folding/cstyle"], function(ace_require, exports, module) {
"use strict";

var oop = ace_require("../lib/oop");
var TextMode = ace_require("./text").Mode;
var VoltHighlightRules = ace_require("./volt_highlight_rules").VoltHighlightRules;
var FoldMode = ace_require("./folding/cstyle").FoldMode;

var Mode = function() {
    this.HighlightRules = VoltHighlightRules;
    this.foldingRules = new FoldMode();
};
oop.inherits(Mode, TextMode);

(function() {
    this.$id = "ace/mode/volt"
}).call(Mode.prototype);

exports.Mode = Mode;
});
